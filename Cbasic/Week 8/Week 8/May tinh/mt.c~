#include <stdio.h>
#include <string.h>

#define TRUE 1
#define FALSE 0
#define MAX 100
#define EMPTY_ERROR -100
#define FULL_ERROR -101

typedef struct stack {
	int top;
	char node[MAX];
};

int empty(struct stack s) {
	if (s.top == -1)
		return TRUE;
	return FALSE;
}
int full(struct stack s) {
	if (s.top == MAX - 1)
		return TRUE;
	return FALSE;
}
void push(struct stack *s, char v) {
	if (full(*s)) {
		//printf("Full\n");
		return;
	}
	s->node[++s->top] = v;
}
char pop(struct stack * s) {
	if (empty(*s)) {
		//printf("Empty\n");
		return EMPTY_ERROR;
	}
	return s->node[s->top--];
}
char top(struct stack s) {
	if (empty(s)) {
		//printf("Empty\n");
		return EMPTY_ERROR;
	}
	return s.node[s.top];
}

int size(struct stack s) {
	return s.top + 1;
}
int laToanTu(char s) {
	if (s == '+' || s == '-' || s == '*' || s == '/')
		return TRUE;
	return FALSE;
}
int laToanHang(char s) {
	if (s == '(' || s == ')')
		return FALSE;
	if (laToanTu(s))
		return FALSE;
	return TRUE;
}
int layDoUuTien(char c) {
	if (c == '*' || c == '/' || c == '%')
		return 2;
	if (c == '+' || c == '-')
		return 1;
	return 0;
}
int main(int argc, char ** argv) {
  struct stack s;int i;
	s.top = -1;
	char input[MAX];
	gets(input);
	int len = strlen(input);
	printf("Input: %s\n", input);
	printf("Output: ");
	//printf("len: %d\n", len);
	for (i = 0; i < len; i++) {
		//printf("%c ", input[i]);
		if (laToanHang(input[i])) {
			printf("%c", input[i]);
		} else if (input[i] == '(') {
			push(&s, input[i]);
		} else if (input[i] == ')') {
			while (top(s) != '(') {
				printf("%c", pop(&s));
			}
			pop(&s);

		} else if (laToanTu(input[i])) {
			if (empty(s))
				push(&s, input[i]);
			else {
				while (laToanTu(top(s))
						&& (layDoUuTien(top(s)) >= layDoUuTien(input[i]))) {
					printf("%c", pop(&s));
				}
				push(&s, input[i]);
			}
		}

	}
	while (empty(s) == FALSE) {
		printf("%c", pop(&s));
	}
    printf("\n");
	return 0;
}
